
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role         String?   @default("emp")
  salary       Int? @default(0)
  joiningDate DateTime? 
  phoneNumber String? 

  accounts Account[]
  sessions Session[]
  attendance attendance[]

  payrole payrole[]
  leaves leaves[]
 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}


// model starts here

model attendance{
  id String @id @default(cuid())

  date DateTime
  status String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  checkIn DateTime
  checkOut DateTime
  totalTime Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendance")
}

model payrole{
  id String @id @default(cuid())
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  salary Int
  bounce Int
  deduction Int
  // net_salary Int

  payment_status String
  payment_date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model leaves{
  id String @id @default(cuid())
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  leave_type String
  // leave_date DateTime
  leave_start DateTime
  leave_end DateTime

  leave_status String
  total_days Int
  reason String
  status String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}